commands:
  01_yum_update:
    command: "sudo yum update -y"
  02_install_git:
    command: "sudo yum install -y git"
  03_install_build_tools:
    command: "sudo yum install -y gcc-c++ make"
  03_install_nodejs_repo:
    command: "sudo curl -sL https://rpm.nodesource.com/setup_10.x | bash -"
  04_install_nodejs:
    command: "sudo yum install -y nodejs"
  05_enable_epel:
    command: "sudo yum-config-manager --enable epel -y"
  06_install_gdal:
    command: "sudo yum install -y gdal"
  07_install_nginx:
    command: "sudo yum install -y epoll nginx"


files:
  "/etc/nginx/nginx.conf" :
    mode: "000644"
    owner: root
    group: root
    content: |
      user wsgi; # Needed for permissions
      pid /var/run/nginx.pid;
      worker_processes 4; # Match number of cores
      worker_rlimit_nofile 200000;

      error_log /var/log/nginx/error.log;

      events {
          use epoll;
          accept_mutex on;
          worker_connections 1024;
      }

      http {
          log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

          access_log  /var/log/nginx/access.log  main;

          open_file_cache max=200000 inactive=20s;
          open_file_cache_valid 30s;
          open_file_cache_min_uses 2;
          open_file_cache_errors on;

          keepalive_timeout 15 5;
          keepalive_requests 5000;
          reset_timedout_connection on;
          client_body_timeout 10;
          send_timeout 20;

          port_in_redirect off;
          server_tokens off; # Remove version info
          tcp_nodelay on;
          tcp_nopush on;
          sendfile on;

          gzip on;
          gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript text/x-js;
          gzip_comp_level 6;
          gzip_proxied any;
          gzip_vary on;

          include /etc/nginx/conf.d/*.conf;
          include mime.types;
          default_type application/octet-stream;
      }

  "/etc/nginx/conf.d/webapp.conf" :
    mode: "000644"
    owner: root
    group: root
    content: |
      upstream python_backend {
          server unix:/opt/python/log/nginx.socket fail_timeout=0;
      }

      server {
          listen 8080 default_server; # avoid to be conflit with apache2, will change to 80 after app is deployed
          server_name _;

          # No logs, to avoid filling the instance disk
          log_not_found off;

          # Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store (Mac).
          location ~ /\. {
              deny all;
          }

          location /generate_204 {
              log_not_found off;
              access_log off;
              return 204;
          }

          location / {
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header Host $http_host;
              proxy_redirect off;
              proxy_pass http://python_backend;
          }
      }


  "/opt/elasticbeanstalk/hooks/appdeploy/enact/99loadnewservice.sh" :
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/usr/bin/env bash
      export PATH=$PATH:/usr/local/bin

      LINE='Listen 8081'
      if ! grep -qF "$LINE" /etc/httpd/conf/httpd.conf
      then
          sed -i 's/Listen 80/Listen 8081/g' /etc/httpd/conf/httpd.conf
      fi

      # Also replace in wsgi.conf
      LINE='<VirtualHost \*:8081>'
      if ! grep -qF "$LINE" /etc/httpd/conf.d/wsgi.conf
      then
          sed -i 's/<VirtualHost \*:80>/<VirtualHost *:8081>/g' /etc/httpd/conf.d/wsgi.conf
      fi

      sed -i 's/autostart=true/autostart=false/g' /opt/python/etc/supervisord.conf

      LINE='files = django.conf'
      if ! grep -qF "$LINE" /opt/python/etc/supervisord.conf
      then
          echo "[include]" >> /opt/python/etc/supervisord.conf && echo "$LINE" >> /opt/python/etc/supervisord.conf
      fi

      supervisorctl -c /opt/python/etc/supervisord.conf reread
      supervisorctl -c /opt/python/etc/supervisord.conf reload

      sed -i 's/listen 8080/listen 80/g' /etc/nginx/conf.d/webapp.conf
      service nginx restart

  "/opt/python/etc/django.conf" :
    mode: "000755"
    owner: root
    group: root
    content: |
      [program:django]
      command=/opt/python/bin/launchdjango

      directory=/opt/python/current/app
      user=wsgi
      numprocs=1
      stdout_logfile=/opt/python/log/django.log
      stderr_logfile=/opt/python/log/django.log
      autostart=true
      autorestart=true
      startsecs=10
      stopwaitsecs=60
      killasgroup=true

      [program:django_q]
      command=/opt/python/bin/launch_worker
      directory=/opt/python/current/app
      user=wsgi
      numprocs=1
      stdout_logfile=/opt/python/log/djangoq.log
      stderr_logfile=/opt/python/log/djangoq.log
      autostart=true
      autorestart=true
      startsecs=10
      stopwaitsecs=60
      killasgroup=true

  "/opt/python/bin/launch_worker" :
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/usr/bin/env bash
      source /opt/python/current/env
      exec django-admin.py qcluster

  "/opt/python/bin/launchdjango" :
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/usr/bin/env bash
      source /opt/python/current/env
      exec python /opt/python/current/app/config/run.py

  "/opt/elasticbeanstalk/hooks/configdeploy/enact/99loadnewservice.sh" :
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/usr/bin/env bash
      export PATH=$PATH:/usr/local/bin

      LINE='Listen 8081'
      if ! grep -qF "$LINE" /etc/httpd/conf/httpd.conf
      then
          sed -i 's/Listen 80/Listen 8081/g' /etc/httpd/conf/httpd.conf
      fi

      # Also replace in wsgi.conf
      LINE='<VirtualHost \*:8081>'
      if ! grep -qF "$LINE" /etc/httpd/conf.d/wsgi.conf
      then
          sed -i 's/<VirtualHost \*:80>/<VirtualHost *:8081>/g' /etc/httpd/conf.d/wsgi.conf
      fi

      sed -i 's/autostart=true/autostart=false/g' /opt/python/etc/supervisord.conf

      LINE='files = uwsgi.conf'
      if ! grep -qF "$LINE" /opt/python/etc/supervisord.conf
      then
          echo "[include]" >> /opt/python/etc/supervisord.conf && echo "$LINE" >> /opt/python/etc/supervisord.conf
      fi

      supervisorctl -c /opt/python/etc/supervisord.conf reread
      supervisorctl -c /opt/python/etc/supervisord.conf reload

      sed -i 's/listen 8080/listen 80/g' /etc/nginx/conf.d/webapp.conf
      service nginx restart

  "/opt/elasticbeanstalk/hooks/restartappserver/enact/99restartnginx.sh" :
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash
      set -xe

      if [ -z "$EB_SYSTEM_STARTUP" ];
      then
        /usr/local/bin/supervisorctl -c /opt/python/etc/supervisord.conf restart django
        /usr/local/bin/supervisorctl -c /opt/python/etc/supervisord.conf restart djangoq
        service nginx restart
      fi

      eventHelper.py --msg "Nginx, Django, and Django-Q  servers successfully restarted." --severity INFO

  "/opt/elasticbeanstalk/tasks/bundlelogs.d/nginx.conf" :
    mode: "000644"
    owner: root
    group: root
    content: |
      /var/log/nginx/*log

  "/opt/elasticbeanstalk/tasks/publishlogs.d/nginx.conf" :
    mode: "000644"
    owner: root
    group: root
    content: |
      /var/log/nginx/*log

  "/opt/elasticbeanstalk/tasks/systemtaillogs.d/nginx.conf" :
    mode: "000644"
    owner: root
    group: root
    content: |
      /var/log/nginx/*log

  "/opt/elasticbeanstalk/tasks/taillogs.d/nginx.conf" :
    mode: "000644"
    owner: root
    group: root
    content: |
      /var/log/nginx/*log

services:
  sysvinit:
    nginx:
      enabled: true
      ensureRunning: true

container_commands:
  01_migrate:
    command: "django-admin.py migrate"
    leader_only: true
  02_npm_install:
    command: "npm install"
  03_npm_insall:
    command: "npm prune --production"
  04_staticone:
    command: "django-admin.py collectstatic --noinput"
  05_compressor:
    command: "django-admin.py compress --force"
  06_collectstatic:
    command: "django-admin.py collectstatic --noinput"
  07_init_worker_deploy:
    command: "logger 'Start deploy script' -t 'DEPLOY'"
  08_worker_script_prepare:
    command: "chmod +x .ebextensions/deploy.sh"
  09_worker_deploy:
    command: ".ebextensions/deploy.sh 2>&1 | /usr/bin/logger -t 'DEPLOY'"
  10_worker_complete:
    command: "logger 'Working finished deploying' -t 'DEPLOY'"

option_settings:
  aws:elasticbeanstalk:application:environment:
    DJANGO_SETTINGS_MODULE: config.settings.production
  aws:elasticbeanstalk:container:python:
    WSGIPATH: config/wsgi.py
